
# version: '3'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile  # Stelle sicher, dass der Dockerfile-Pfad korrekt ist
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - ./app/static:/app/static  # Hier mountest du den Ordner, der die swagger.yaml enthält
    environment:
      - FLASK_ENV=development
      - FLASK_APP=run.py
      - DATABASE_URL=${DATABASE_URL}     # Verwendet DATABASE_URL aus der .env-Datei
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONPATH=/app    # Hier wird der PYTHONPATH korrekt gesetzt
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_4_network
     

  db:
    build:
      context: .
      dockerfile: Dockerfile.mysql  # Verwende das benutzerdefinierte Dockerfile für MySQL
    container_name: app_4-db-1
    command: 
      - --explicit_defaults_for_timestamp=ON
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app_4_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "db", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5

  test:
    build: 
      context: .
      dockerfile: Dockerfile  # Verwende den gleichen Dockerfile für Test, falls zutreffend
    command: pytest
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - TEST_DATABASE_URL=${TEST_DATABASE_URL}          # Verwendet TEST_DATABASE_URL aus der .env-Datei
    volumes:
      - .:/app
    networks:
      - app_4_network

networks:
  app_4_network:
    name: app_4_network  # Hier wird ein fester Netzwerknamen definiert
    driver: bridge

volumes:
  db_data:
